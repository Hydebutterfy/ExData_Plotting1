n["atheist"]
n["atheist"]+n["non-atheist"]
china<-ath
china <- atheism %>%
filter(nationality == "China" , atheism$year == "2012")
View(china)
View(china)
View(atheism)
View(atheism)
filter(nationality == "Spain" , atheism$year == "2012")
spain <- atheism %>% filter(nationality == "Spain" , atheism$year == "2005"and"2012")
spain <- atheism %>% filter(nationality == "Spain" , atheism$year == "2005"and"2012")
spain <- atheism %>% filter(nationality == "Spain" , atheism$year == "2005"|"2012")
spain <- atheism %>% filter(nationality == "Spain")
View(spain)
View(spain)
inference?
?inference
View(spain)
spain2005 <- atheism %>%
filter(nationality == "Spain" , atheism$year == "2012")
summary(spain2005)
spain2005 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2012")
library(statsr)
library(dplyr)
library(ggplot2)
spain2005 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2012")
spain2012 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2012")
spain2005 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2005")
View(spain2005)
View(spain2005)
View(spain2012)
View(spain2012)
spain2012 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2012")
spain2005 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2005")
spain2005atheisnumbert<-factor(spain2005$response)
spain2005<-summary(atheisnumbert)
spain2005p<-spain2005["atheist"]/(spain2005["atheist"]+spain2005["non-atheist"])
spain2012atheisnumbert<-factor(spain2012$response)
spain2012<-summary(atheisnumbert)
spain2012p<-spain2012["atheist"]/(spain2012["atheist"]+spain2012["non-atheist"])
spain2012p
spain2005p
spain2012 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2012")
spain2005 <- atheism %>%
filter(atheism$nationality == "Spain" , atheism$year == "2005")
spain2005atheisnumbert<-factor(spain2005$response)
spain2005<-summary(spain2005atheisnumbert)
spain2005p<-spain2005["atheist"]/(spain2005["atheist"]+spain2005["non-atheist"])
spain2012atheisnumbert<-factor(spain2012$response)
spain2012<-summary(spain2012atheisnumbert)
spain2012p<-spain2012["atheist"]/(spain2012["atheist"]+spain2012["non-atheist"])
0.25/(0.01/1.96)**2
View(atheism)
View(atheism)
attcah(atheism)
attach(atheism)
plot(year,response)
hist(year,response)
attach(china)
hist(response)
hist(year)
dose<-c(20,30,40,45,60)
drugA<-c(16,20,27,40,60)
drugB<-c(15,18,25,31,40)
plot(dose,drugA,type="b")
help("polt)
help(polt)
help(pl0t)
help(plot)
opar<-par(no.readonly=TRUE)
par(lty=2,pch=17)
plot(dose,drugA,type="b")
par(opar)
plot(dose,drugA,type="b")
plot(dose,drugA,type="b")
n<-10
mycolors<-rainbow(n)
pie(rep(1,n),labels=mycolors,col=mycolors)
mygrays<-gray(0:n/n)
pie(rep(1,n),labels=mygrays,col=mygrays)
mean(1:5)
"hello world"
x<-"do you love me?"
x
help("mean")
?mean
?summary
??summary
apropos(4)
apropos("4")
demo(plot())
demo(plot
demo(plot)
example("plot")
example("plot")
demo()
install.git()
??git
x<-c(8:27)
x
x<-c(0:100)
sd(x)
demo(plotmath)
demo()
demo(plotmath)
median(1, 2, 3, 4, 5)
median(1:5)
ls
ls()
pet<-sample(c(a,b,c,d),1000,replace=TRUE)
pet<-sample(c("a","b","c","d"),1000,replace=TRUE)
head(pet,10)
summary(pet)
str(pet)
as.factor(pet)
summary(pet)
summary(as.factor(pet))
ï¼Ÿvcd
library("vcd", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("read.table")
install.packages(c("BH", "cluster", "codetools", "colorspace", "curl", "DBI", "evaluate", "foreign", "ggplot2", "jsonlite", "knitr", "lattice", "Matrix", "mgcv", "mnormt", "openssl", "psych", "R6", "Rcpp", "reshape2", "rmarkdown", "scales", "shiny", "snow", "stringi", "stringr", "survival", "tibble", "XML", "yaml"))
install.packages(c("BH", "cluster", "codetools", "colorspace", "curl", "DBI", "evaluate", "foreign", "ggplot2", "jsonlite", "knitr", "lattice", "Matrix", "mgcv", "mnormt", "openssl", "psych", "R6", "Rcpp", "reshape2", "rmarkdown", "scales", "shiny", "snow", "stringi", "stringr", "survival", "tibble", "XML", "yaml"))
install.packages(c("BH", "cluster", "codetools", "colorspace", "curl", "DBI", "evaluate", "foreign", "ggplot2", "jsonlite", "knitr", "lattice", "Matrix", "mgcv", "mnormt", "openssl", "psych", "R6", "Rcpp", "reshape2", "rmarkdown", "scales", "shiny", "snow", "stringi", "stringr", "survival", "tibble", "XML", "yaml"))
install.packages(c("ggplot2", "XML"))
install.packages(c("ggplot2", "XML"))
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages(c("digest", "ggplot2", "git2r", "htmlTable", "jsonlite", "mgcv", "openssl", "psych", "RSQLite", "shiny", "survival", "tidyr"))
?lm
example(lm)
exapmle(abline)
example("abline")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("readr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
example("read.csv")
example(unique
)
example("cut")
install_from_swirl("Exploratory Data Analysis")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
quantile(pollution$pm25)
ppm<-pollution$pm25
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
?rug
rug(low)
rug(high)
low
high
?hist
hist(ppm,col="green",break=100)
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(12,lwd=2)
abline(v=12,lwd=2)
rug(v=median(ppm),col="magenta",lwd=4)
rug(v=median(ppm),col="magenta",lwd=4)
abline(v=median(ppm),col="magenta",lwd=4)
names(polution)
names(pollution)
reg<-pollution$region
reg<-table(pollution$region)
reg
barplot(reg,col = "wheat")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
ï¼Ÿpar
?par
example(par)
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(subset(pollution, region == "east")$pm25, col = "green")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution,region="west")$pm25, col = "green")
hist(subset(pollution,region="west")$pm25, col == "green")
hist(subset(pollution,region=="west")$pm25, col="green")
?
l
with(pollution,plot(latitude, pm25))
View(pollution)
View(pollution)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$pm25,pollution$pm25)
plot(pollution$pm25,pollution$latitude)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2),mar = c(5, 4, 2, 1))
plot(subset(pollution,region=="west")$latitude, ppm)
west<-subset(pollution,region=="west")
with(west,plot(latitude,pm25,main="West")
)
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful,plot(eruptions,waiting))
title(main= "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main= "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main= "Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.off
dev.off()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
head(cars)
with(cars, plot(speed, dist))
?text
text(mean(cars$speed),max(cars$dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
View(state)
View(state)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,3))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$ozone,airquality$boolean,na.rm=TRUE)
?range
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
main="Ozone and Wind in New York City"
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red",main)
swirl()
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
?par
par()$pin
par$fg
par()$fg
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,type="n")
plot(airquality$Wind,airquality$Ozone)
plot(airquality$Wind,airquality$Ozone,type="n")
title
title(main="Wind and Ozone in NYC")
may<-subset(airquality,Month == 5)
?points
point(may$Wind,may$Ozone,type=17,col="blue")
points(may$Wind,may$Ozone,type=17,col="blue")
points(may$Wind,may$Ozone,col="blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend
legend("topright", pch=c(17,8), col=c("blue","red"),legend=c("May","Other
| Months")).
legend("topright", pch=c(17,8), col=c("blue","red"),legend=c("May","Other
| Months"))
legend("topright", pch=c(17,8), col=c("blue","red"),legend=c("May","Other Months"))
abline(airquality$Wind,lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main = "Ozone and Wind")
plot(airquality$Solar,airquality$Ozone,main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").
plot(airquality$Ozone, airquality$Solar, main = "Ozone and Solar Radiation").
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").
plot(airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation").
airquality$Solar.R
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation").
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2,
| 0))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone, main = "Ozone and Temperature")
?mtext
mtext("Ozone and Weather in New York City",outer =TRUE)
setwd("~/Rlanguage/Exploratory Data Analysis/ExData_Plotting1")
unzipdata<-unzip("household_power_consumption.zip")
unzip("household_power_consumption.zip")
alldata<-read.table("household_power_consumption.txt")
?read.table
alldata<-read.table("household_power_consumption.txt",header = TRUE,sep="")
alldata<-read.table("household_power_consumption.txt",header = TRUE,sep=",")
alldata<-read.cvs("household_power_consumption.txt")
alldata<-read.csv("household_power_consumption.txt")
View(alldata)
alldata<-read.table("household_power_consumption.txt",header = TRUE,sep=";")
alldata<-read.table("household_power_consumption.txt",header = TRUE,sep=";")[,c(2007-02-01,2007-02-02)]
View(alldata)
names(alldata)
source('~/Rlanguage/Exploratory Data Analysis/ExData_Plotting1/Exdata.R')
dim(alldata)
dim(alldata)
head(alldata)
selecteddata<-filter(alldata,Data=c(1/2/2007,2/2/2007)
)
str(alldata)
alldata<-read.table("household_power_consumption.txt",header = TRUE,sep=";",stringsAsFactors = FALSE)
names(alldata)
dim(alldata)
head(alldata)
str(alldata)
selecteddata<-filter(alldata,Data=c("1/2/2007","2/2/2007"))
selecteddata<-filter(alldata,Data==c("1/2/2007","2/2/2007"))
selecteddata<-filter(alldata,Date==c("1/2/2007","2/2/2007"))
alldata$Date
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007"))
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007")
selecteddata<-filter(alldata,Date=="1/2/2007")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
selecteddata<-filter(alldata,Date=="1/2/2007")
selecteddata<-filter(alldata,Date==c("1/2/2007","2/2/2007"))
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007")
dim(selecteddata)
head(selecteddata)
str(selecteddata)
rm(alldata)
selecteddata$Date<-as.Date(selecteddata$Date)
str(selecteddata)
View(selecteddata)
?as.Date
alldata<-read.table("household_power_consumption.txt",header = TRUE,sep=";",stringsAsFactors = FALSE)
names(alldata)
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007")
View(selecteddata)
selecteddata$Date<-as.Date(selecteddata$Date,"%d/%m/%y")
str(selecteddata)
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007")
?strptime
a<-as.Date(selecteddata$Date,"%d/%m/%y")
b<-strptime(selecteddata$Time,"%H:%M:%OS")
a
b
alldata<-read.table("household_power_consumption.txt",header = TRUE,sep=";",stringsAsFactors = FALSE,na.strings = '?')
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007")
a<-as.Date(selecteddata$Date,format = "%d/%m/%y")
b<-strptime(selecteddata$Time,format = "%H:%M:%OS")
c<-selecteddata$Date+selecteddata$Time
mutate(selecteddata,Date/time=Date+Time)
mutate(selecteddata,Datetime=Date+Time)
mutate(selecteddata,Datetime=paste(Date+Time))
mutate(selecteddata,Datetime="Date"+"Time")
mutate(selecteddata,Datetime="Date""Time")
mutate(selecteddata,Datetime=DateTime)
mutate(selecteddata,Datetime="Date""Time")
a<- as.Date(data$Date, format = '%d/%m/%Y')
a<- as.Date(selecteddata$Date, format = '%d/%m/%Y')
b<- as.Date(selecteddata$Date, format = '%d/%m/%y')
selectdata<- as.Date(selecteddata$Date, format = '%d/%m/%Y')
selecteddata$Date<- as.Date(selecteddata$Date, format = '%d/%m/%Y')
y<-with(selecteddata,paste(Data, Time))
y<-with(selecteddata,paste(Date, Time))
strptime()
strptime(y,"%y/%m/%d %H:%M:%S")
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007")
y<-with(selecteddata,paste(Date, Time))
z<-strptime(y, "%d/%m/%y %H:%M:%S")
z<-as.POSIXct(y)
z<-strptime(y, "%d/%m/%Y %H:%M:%S")
class(z)
selecteddata<-filter(alldata,Date=="1/2/2007"|Date=="2/2/2007")
z<-with(selecteddata,strptime(paste(Date, Time), "%d/%m/%Y %H:%M:%S"))
s<-with(selecteddata,strptime(paste(Date, Time), "%d/%m/%Y %H:%M:%S"))
selecteddata$DateTime<- with(selecteddata,strptime(paste(Date, Time), "%d/%m/%Y %H:%M:%S"))
str(selecteddata)
View(selecteddata)
with(selectdata,hist(Global_active_power)
)
with(selectdata,hist(Global_active_power,col="green"))
with(selectdata, hist(Global_active_power))
?hist
with(selectdata, hist(Global_active_power, xlab = 'Global Active Power (kilowatt)', main = 'Global Active Power', col = 'red'))
selectdata$Global_active_power
str(selecteddata)
selecteddata$Global_active_power
with(selectdata, hist(Global_active_power, xlab = 'Global Active Power (kilowatt)', main = 'Global Active Power', col = 'red'))
with(selectedata, hist(Global_active_power, xlab = 'Global Active Power (kilowatt)', main = 'Global Active Power', col = 'red'))
with(selecteddata, hist(Global_active_power, xlab = 'Global Active Power (kilowatt)', main = 'Global Active Power', col = 'red'))
?dev.copy
?png
png(filename = 'figures/plot1.png', width = 480, height = 480)
with(selecteddata, hist(Global_active_power, xlab = 'Global Active Power (kilowatt)', main = 'Global Active Power', col = 'red'))
dev.off()
png(filename = 'figure/plot1.png', width = 480, height = 480)
with(selecteddata, hist(Global_active_power, xlab = 'Global Active Power (kilowatt)', main = 'Global Active Power', col = 'red'))
dev.off()
with(selecteddata, hist(Global_active_power, xlab = 'Global Active Power (kilowatts)',bg = "transparent",main = 'Global Active Power', col = 'red'))
dev.off()
with(selecteddata, hist(Global_active_power, xlab = 'Global Active Power (kilowatts)',bg = "transparent",main = 'Global Active Power', col = 'red'))
dev.off()
png(filename = 'figure/plot1.png', width = 480, height = 480)
with(selecteddata, hist(Global_active_power, xlab = 'Global Active Power (kilowatts)',bg = "transparent",main = 'Global Active Power', col = 'red'))
dev.off()
View(selecteddata)
png(filename = 'figure/plot1.png', width = 480, height = 480)
with(selecteddata, hist(Global_active_power, xlab = 'Global Active Power (kilowatts)',bg = "transparent",main = 'Global Active Power', col = 'red'))
dev.off()
with(selecteddata, plot(Global_active_power, DataTime))
with(selecteddata, plot(Global_active_power, DateTime))
with(selecteddata, plot(DateTime,Global_active_power))
?plot
with(selecteddata, plot(DateTime,Global_active_power,type = "l"))
with(selecteddata, plot(DateTime,Global_active_power,type = "l",ylab = 'Global Active Power (kilowatts)'))
?Sys.setlocale
with(selecteddata, plot(DateTime,Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
Sys.setlocale(category = "LC_ALL", locale = "english")
with(selecteddata, plot(wday(DateTime),Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
with(selecteddata, plot(wday(DateTime),Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
with(selecteddata, plot(DateTime,Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
str(selecteddata)
?plot
example("plot")
example("plot")
with(selecteddata, plot(as.character(DateTime, format = "%A"),Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
as.character(DateTime, format = "%A")
as.character(selecteddata$DateTime, format = "%A")
selecteddata$Date1<- as.Date(selecteddata$Date, format = '%d/%m/%Y')
selecteddata$DateTime1 <- as.POSIXct(paste(data$Date, data$Time))
selecteddata$Date1<- as.Date(selecteddata$Date, format = '%d/%m/%Y')
selecteddata$DateTime1 <- as.POSIXct(paste(selecteddata$Date1, selecteddata$Time))
Sys.setlocale(category = "LC_ALL", locale = "english")
plot(selecteddata$DateTime1, selecteddata$Global_active_power, xlab = '', ylab = 'Global Active Power (kilowatt)', type = 'l')
plot(selecteddata$DateTime1, selecteddata$Global_active_power, xlab = '', ylab = 'Global Active Power (kilowatt)', xlim = c(Thu,Sat),type = 'l')
plot(selecteddata$DateTime1, selecteddata$Global_active_power, xlab = '', ylab = 'Global Active Power (kilowatt)', xlim = c("Thu","Sat"),type = 'l')
?par
plot(selecteddata$DateTime1, selecteddata$Global_active_power, xlab = '', ylab = 'Global Active Power (kilowatt)', type = 'l')
xlim = c(1,3)
xlim = c(1,100)
?xlim
Sys.setlocale(category = "LC_ALL", locale = "english")
?Sys.setlocale
Sys.setlocale("LC_TIME", "english")
Sys.setlocale(category="LC_TIME", "english")
plot(selecteddata$DateTime1, selecteddata$Global_active_power, xlab = '', ylab = 'Global Active Power (kilowatt)',type = 'l')
Sys.setlocale(category="LC_TIME", "english")
Sys.setlocale("LC_TIME", "English")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
plot(selecteddata$DateTime1, selecteddata$Global_active_power, xlab = '', ylab = 'Global Active Power (kilowatt)',type = 'l')
with(selecteddata, plot(DateTime,Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
with(selecteddata, plot(DateTime,Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
png(filename = 'figure/plot2.png', width = 480, height = 480)
Sys.setlocale("LC_TIME", "en_US.UTF-8")
with(selecteddata, plot(DateTime,Global_active_power,type = "l",xlab = '',ylab = 'Global Active Power (kilowatts)'))
dev.off()
png(filename = 'figure/plot3.png', width = 480, height = 480)
Sys.setlocale("LC_TIME", "en_US.UTF-8")
with(selecteddata, plot(DateTime,Sub_metering_1,type = "l"))
with(selecteddata, plot(DateTime,Sub_metering_2,type = "l"))
with(selecteddata, plot(DateTime,Sub_metering_2))
png(filename = 'figure/plot3.png', width = 480, height = 480)
Sys.setlocale("LC_TIME", "en_US.UTF-8")
plot(selecteddata$DateTime,selecteddata$Sub_metering_1)
plot(selecteddata$DateTime,selecteddata$Sub_metering_1)
selecteddata$Sub_metering_1
plot(selecteddata$DateTime,selecteddata$Sub_metering_1)
plot(selecteddata$DateTime,selecteddata$Sub_metering_2)
plot(selecteddata$DateTime,selecteddata$Sub_metering_3)
plot(selecteddata$DateTime,selecteddata$Global_active_power)
